corrplot(cor(df),method="ellipse")
df<-default[-1,-c(1,3:5,7:12,25)]
func1<-function(x){
as.numeric(x)
}
df<-as.data.frame(apply(df,2,func1))
normalize_function(x){
(x-mean(x))
}
View(df)
default<-read.csv("C:\\Users\\sandhyao\\Desktop\\RDataMiningBlueprints_Code\\Chapter 8\\default.csv")
df<-default[-1,-c(1,3:5,7:12,25)]
corrplot::corrplot(cor(df),method="ellipse")
func1<-function(x){
as.numeric(x)
}
df<-as.data.frame(apply(df,2,func1))
dn<-function(x){
(x-mean(x))
}
#transformed dataset
dn<-as.data.frame(apply(df,2,dn))
#calculating correlation between variables
cor(df)
pairs(df[1:900,])
corrplot(cor(df),method="ellipse")
normalize_function(x){
(x-mean(x))
normalize<-function(x){
(x-mean(x))
}
corrplot::corrplot(cor(df),method="ellipse")
default<-read.csv("C:\\Users\\sandhyao\\Desktop\\RDataMiningBlueprints_Code\\Chapter 8\\default.csv")
df<-default[-1,-c(1,3:5,7:12,25)]
corrplot::corrplot(cor(df),method="ellipse")
corrplot(cor(df),method="ellipse")
func1<-function(x){
as.numeric(x)
}
df<-as.data.frame(apply(df,2,func1))
corrplot::corrplot(cor(df),method="ellipse")
default<-read.csv("C:\\Users\\sandhyao\\Desktop\\RDataMiningBlueprints_Code\\Chapter 8\\default.csv")
df<-default[-1,-c(1,3:5,7:12,25)]
func1<-function(x){
as.numeric(x)
}
df<-as.data.frame(apply(df,2,func1))
cor(df)
pairs(df[1:900,])
corrplot::corrplot(cor(df),method="ellipse")
normalize<-function(x){
(x-mean(x))
}
dn<-as.data.frame(apply(df,2,normalize))
str(dn)
options(digits = 2)
pca1<-princomp(df,scores = T, cor = T)
summary(pca1)
pca1$loadings
pca1
plot(pca1, main = "Percentage Variation Explained by Principal Components")
screeplot(pca1, type = "line", main = "Scree Plot")
biplot(pca1)
loadings(pca1)
diag(cov(df))
str(dn)
options(digits = 2)
pca1<-princomp(df,scores = T, cor = T)
summary(pca1)
#Loadings of Principal Components
pca1$loadings
pca1
plot(pca1, main = "Percentage Variation Explained by Principal Components")
screeplot(pca1, type = "line", main = "Scree Plot")
biplot(pca1)
diag(cov(df))
pca1$scores[1:10,]
eigen(cor(df),TRUE)$values
head(eigen(cor(df),TRUE)$vectors)
pca1$sdev
pca1$center
pca2<-princomp(dn)
summary(pca2)
result<-round(summary(pca2)[1]$sdev,0)
plot(result, main = "Standard Deviation by Principal Components",
xlab="Principal Components",ylab="Standard Deviation",type='o')
pca<-prcomp(df,scale. = T)
summary(pca)
summary(pca)$rotation
head(summary(pca)$x)
biplot(prcomp(df,scale. = T))
eig<-eigen(cor(df))
eigvec<-t(eig$vectors)
df_scaled<-t(dn)
df_new<-eigvec %*% df_scaled
df_new<-t(df_new)
colnames(df_new)<-c("PC1","PC2","PC3","PC4",
"PC5","PC6","PC7","PC8",
"PC9","PC10","PC11","PC12",
"PC13","PC14")
head(df_new)
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\RDataMiningBlueprints_Code\\Chapter 9\\ArtPiece.csv")
str(art)
install.packages("neuralnet")
library(neuralnet)
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\RDataMiningBlueprints_Code\\Chapter 9\\ArtPiece_1.csv")
str(art)
art$Art.Auction.House<-as.factor(art$Art.Auction.House)
art$Art.Auction.House<-as.factor(art$Art.Auction.House)
art$IsGood.Purchase<-as.factor(art$IsGood.Purchase)
art$Art.Category<-as.factor(art$Art.Category)
art$Prominent.Color<-as.factor(art$Prominent.Color)
art$Brush<-as.factor(art$Brush)
art$Brush.Size<-as.factor(art$Brush.Size)
art$Brush.Finesse<-as.factor(art$Brush.Finesse)
art$Art.Nationality<-as.factor(art$Art.Nationality)
art$Top.3.artists<-as.factor(art$Top.3.artists)
art$GoodArt.check<-as.factor(art$GoodArt.check)
art$AuctionHouseGuarantee<-as.factor(art$AuctionHouseGuarantee)
art$Is.It.Online.Sale<-as.factor(art$Is.It.Online.Sale)
library(neuralnet)
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\RDataMiningBlueprints_Code\\Chapter 9\\ArtPiece_1.csv")
str(art)
art$Art.Auction.House<-as.factor(art$Art.Auction.House)
art$IsGood.Purchase<-as.factor(art$IsGood.Purchase)
art$Art.Category<-as.factor(art$Art.Category)
art$Prominent.Color<-as.factor(art$Prominent.Color)
art$Brush<-as.factor(art$Brush)
art$Brush.Size<-as.factor(art$Brush.Size)
art$Brush.Finesse<-as.factor(art$Brush.Finesse)
art$Art.Nationality<-as.factor(art$Art.Nationality)
art$Top.3.artists<-as.factor(art$Top.3.artists)
art$GoodArt.check<-as.factor(art$GoodArt.check)
art$AuctionHouseGuarantee<-as.factor(art$AuctionHouseGuarantee)
art$Is.It.Online.Sale<-as.factor(art$Is.It.Online.Sale)
art$Art.Auction.House<-as.factor(art$Art.Auction.House)
View(art)
art<- read.csv("C:\Users\sandhyao\Desktop\R Data Mining Projects\Section_9")
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\R Data Mining Projects\\Section_9")
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\R Data Mining Projects\\Section_9\ArtPiece_1.csv")
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\R Data Mining Projects\\Section_9\\ArtPiece_1.csv")
library(neuralnet)
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\R Data Mining Projects\\Section_9\\ArtPiece_1.csv")
str(art)
library(neuralnet)
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\R Data Mining Projects\\Section_9\\ArtPiece_1.csv")
str(art)
art$Art.Auction.House<-as.factor(art$Art.Auction.House)
art$IsGood.Purchase<-as.factor(art$IsGood.Purchase)
art$Art.Category<-as.factor(art$Art.Category)
art$Prominent.Color<-as.factor(art$Prominent.Color)
art$Brush<-as.factor(art$Brush)
art$Brush.Size<-as.factor(art$Brush.Size)
art$Brush.Finesse<-as.factor(art$Brush.Finesse)
art$Art.Nationality<-as.factor(art$Art.Nationality)
art$Top.3.artists<-as.factor(art$Top.3.artists)
art$GoodArt.check<-as.factor(art$GoodArt.check)
art$AuctionHouseGuarantee<-as.factor(art$AuctionHouseGuarantee)
art$Is.It.Online.Sale<-as.factor(art$Is.It.Online.Sale)
art$Critic.Ratings<-as.numeric(art$Critic.Ratings)
art$Acq.Cost<-as.numeric(art$Acq.Cost)
art$CurrentAuctionAveragePrice<-as.numeric(art$CurrentAuctionAveragePrice)
art$CollectorsAverageprice<-as.numeric(art$CollectorsAverageprice)
art$Min.Guarantee.Cost<-as.numeric(art$Min.Guarantee.Cost)
fun1<-function(x){
ifelse(x=="#VALUE!",NA,x)
}
art<-as.data.frame(apply(art,2,fun1))
art<-na.omit(art)
art<-art[,c("Art.Auction.House","IsGood.Purchase","Art.Category",
"Prominent.Color","Brush","Brush.Size","Brush.Finesse",
"Art.Nationality","Top.3.artists","GoodArt.check",
"AuctionHouseGuarantee","Is.It.Online.Sale","Critic.Ratings",
"Acq.Cost","CurrentAuctionAveragePrice","CollectorsAverageprice",
"Min.Guarantee.Cost")]
library(dummy)
install.packages("dummy")
library(dummy)
art_dummy<-dummy(art[,c("Art.Auction.House","IsGood.Purchase","Art.Category",
"Prominent.Color","Brush","Brush.Size","Brush.Finesse",
"Art.Nationality","Top.3.artists","GoodArt.check",
"AuctionHouseGuarantee","Is.It.Online.Sale")],int=F)
art_num<-art[,c("Critic.Ratings",
"Acq.Cost","CurrentAuctionAveragePrice","CollectorsAverageprice",
"Min.Guarantee.Cost")]
art<-cbind(art_num,art_dummy)
smp_size <- floor(0.70 * nrow(art))
set.seed(123)
train_ind <- sample(seq_len(nrow(art)), size = smp_size)
train <- art[train_ind, ]
test <- art[-train_ind,
]
fun2<-function(x){
as.numeric(x)
}
train<-as.data.frame(apply(train,2,fun2))
test<-as.data.frame(apply(test,2,fun2))
fit<- neuralnet(formula = CurrentAuctionAveragePrice ~ Critic.Ratings +
Acq.Cost + CollectorsAverageprice + Min.Guarantee.Cost,
data = train,hidden = 15, err.fct = "sse", linear.output = F)
fit
fit$result.matrix
output<-cbind(fit$covariate,fit$result.matrix[[1]])
head(output)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
library(nnet)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
fit
plot(fit)
plot(fit)
plot(fit$CurrentAuctionAveragePrice~fit$Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost)
plot(fit$CurrentAuctionAveragePrice~fit$Critic.Ratings+fit$Acq.Cost+
fit$CollectorsAverageprice+fit$Min.Guarantee.Cost)
plot(fit$CurrentAuctionAveragePrice,fit$Critic.Ratings+fit$Acq.Cost+
fit$CollectorsAverageprice+fit$Min.Guarantee.Cost)
fit$result.matrix
output<-cbind(fit$covariate,fit$result.matrix[[1]])
head(output)
plot(fit$CurrentAuctionAveragePrice,fit$Critic.Ratings)
plot(fit$CurrentAuctionAveragePrice,fit$Critic.Ratings)
plot(fit)
plot(fit)
dev.off()
dev.off(fit)
par(mar=numeric(4),mfrow=c(1,2),family='serif')
plot(mod1,nid=F)
plot(fit,nid=F)
plot(fit)
plot(fit$all)
plot(fit)
plot(fit)
fit<-neuralnet(IsGood.Purchase_1~Brush.Size_1+Brush.Size_2+Brush.Size_3+
Brush.Finesse_Coarse+Brush.Finesse_Fine+
Art.Nationality_American+Art.Nationality_Asian+
Art.Nationality_European+GoodArt.check_YES,data=train[1:2000,],
hidden = 25,err.fct = "ce",linear.output = F)
fit
output<-cbind(fit$covariate,fit$result.matrix[[1]])
head(output)
plot(output)
plot(fit)
fit.nnet<-nnet(factor(IsGood.Purchase_1)~Brush.Size_1+Brush.Size_2+Brush.Size_3+
Brush.Finesse_Coarse+Brush.Finesse_Fine+
Art.Nationality_American+Art.Nationality_Asian+
Art.Nationality_European+GoodArt.check_YES,data=train[1:2000,],
size=9)
fit.nnet
output<-cbind(fit$covariate,fit$result.matrix[[1]])
plot(fit)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
output<-cbind(fit$covariate,fit$result.matrix[[1]])
plot(fit)
fit<-nnetar(AirPassengers, p=9,P=,size = 10, repeats = 50,lambda = 0)>
plot(forecast(fit,10))
library(nnetar)
install.packages("nnetar")
library(nnetar)
help(nnetar)
library(forecast)
install.packages("forecast")
library(forecast)
library(forecast)
fit<-nnetar(AirPassengers, p=9,P=,size = 10, repeats = 50,lambda = 0)>
plot(forecast(fit,10))
fit<-nnetar(AirPassengers, p=9,P=,size = 10, repeats = 50,lambda = 0)
plot(forecast(fit,10))
summary(fit)
plot(AirPassengers,lwd=5)
library(forecast)
plot(AirPassengers,lwd=5)
fit<-nnetar(AirPassengers, p=9,P=,size = 10, repeats = 50,lambda = 0)
summary(fit)
plot(forecast(fit,10))
plot(forecast(fit,10))
plot.nnet(fit,wts.only=T)
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(fit,wts.only=T)
plot.nnet(fit,wts.only=T)
plot(fit)
plot.nnet(fit,wts.only=T)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
plot(fit)
plot(fit)
fit$result.matrix
output<-cbind(fit$covariate,fit$result.matrix[[1]])
head(output)
fit<- neuralnet(formula = CurrentAuctionAveragePrice ~ Critic.Ratings +
Acq.Cost + CollectorsAverageprice + Min.Guarantee.Cost,
data = train,hidden = 15, err.fct = "sse", linear.output = F)
fit<- neuralnet(formula = CurrentAuctionAveragePrice ~ Critic.Ratings +
Acq.Cost + CollectorsAverageprice + Min.Guarantee.Cost,
data = train,hidden = 15, err.fct = "sse", linear.output = F)
fit
fit$result.matrix
output<-cbind(fit$covariate,fit$result.matrix[[1]])
head(output)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
plot(fit)
plot(fit)
View(art_num)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
plot(fit)
}
x = 2
if(x>3){
print("greater value")
}else {
print("lesser value")
}
x = c(1:10)
y = c(1:10)
for(i in 1:10){
z[i] = x[i]*y[i]
}
z[i]
}
x = c(1:10)
y = c(1:10)
for(i in 1:10){
z[i] = x[i]*y[i]
}
z[i] = x[i] * y[i]
}
x = c(1:10)
y = c(1:10)
for(i in 1:10){
z[i] = x[i] * y[i]
}
z=0
x = c(1:10)
y = c(1:10)
for(i in 1:10){
z[i] = x[i]*y[i]
}
z
install.packages(c("plotrix",
"RColorBrewer"))
library(plotrix)
library(RColorBrewer)
?plot
?plot()
x = c(1:5) # Numeric Vector
x
y ="I am Home" # Character Vector
y
c = c(1+3i) #complex vector
c
z = list(c(1:5),"I am Home") # List
z
z = c( 1,2,3, NA,5,NA) # NA in R is missing Data
z
is.na(z)
complete.cases(z)
clean <- complete.cases(z)
z[clean] # used to remove NA from data
0/0
m <- c(2/3,3/3,0/0)
m
is.finite(m)
is.infinite(m)
is.nan(m)
k = 1/0
k
dk=c(1,45,67,20)
anyNA(dk)
dk[3]=NA
anyNA(dk)
vec = c(1:10)
vec
mat = matrix(c(1,2,3,4,5,6,7,8,9,10),nrow = 2, ncol = 5)
mat
?matrix
t(mat) # transpose a matrix
d = diag(3) # generate an identity matrix
d
?diag
zro = matrix(rep(0,6),ncol = 2,nrow = 3 )# generate amatrix of Zeros
zro
mat = matrix(c(1:10),nrow = 2, ncol = 5)
mat
mat[2,3]
mat[2,3] = 16
mat[2,3]
mat[2, ]
data = data.frame(x = c(1:4), y = c("tom","jerry","luke","brian"))
data
mat = matrix(c(1:10), nrow = 2, ncol = 5)
data.frame(mat)
?data.frame
data = data.frame(x = c(1:4), y = c("tom","jerry","luke","brian"))
data$age = c(2,2,3,5)
data
age = c(2,2,3,5)
data = cbind(data, age)
data
data = data[,-2]
data
data = data.frame(x = c(1:4), y = c("tom","jerry","luke","brian"))
data = data[c(2,1)]# will reorder the columnsdata
data
names(data)
colnames(data) = c("Number","Names")
names(data)
getwd()
setwd("C:\Users\sandhyao\Desktop\R April\R Data Visualisation\Section 01\")
setwd(r"C:\Users\sandhyao\Desktop\R April\R Data Visualisation\Section 01\")
setwd(r"C:\\Users\\sandhyao\\Desktop\\R April\\R Data Visualisation\\Section 01\\")
setwd(r'C:\\Users\\sandhyao\\Desktop\\R April\\R Data Visualisation\\Section 01')
setwd(r"C:\\Users\\sandhyao\\Desktop\\R April\\R Data Visualisation\\Section 01")
setwd("C:\\Users\\sandhyao\\Desktop\\R April\\R Data Visualisation\\Section 01")
getwd()
test = read.csv("raw.csv", sep = ",", header = TRUE)
test
data=read.table("raw.csv",header=TRUE,sep=",")
data
row.names(data)
data=read.table("raw.csv",header=TRUE,sep=",", row.names=c("Names"))
row.names(data)
View(data)
write.table(data, "mydata.csv", sep=",")
source('add.R')
add(2,15)
x=2
if(x>3){
print("greater value")
}else {
print("lesser value")
}
x = c(1:10)
y = c(1:10)
z=0
for(i in 1:10){
z[i] = x[i]*y[i]
}
z
mat= matrix(1:25, 5,5)
for (i in 1:5){
for (j in 1:5){
if (i ==j){
print(mat[i,j])
}
}
}
tapply(mtcars$mpg,mtcars$gear,mean)
mat= matrix(1:25, 5,5)
apply(mat,1,sd) # 1 will do row wise computation
apply(mat,2,sd) # 2 will do column wise computation
j = list(x = 1:4, b = rnorm(100,1,2))
lapply(j,mean)
tapply(mtcars$mpg,mtcars$gear,mean)
?par
x=c(1:10)
y=c(1:10)
par(bg = "#646989", las = 1, col.lab = "black", col.axis ="white",
bty = "n",cex.axis = 0.9,cex.lab= 1.5)
plot(x,y, pch = 20, xlab = "fake x data", ylab = "fake y data")
png("TEST.png", width = 300, height = 600)
plot(x,y, xlab = "x axis", ylab = "y axis", cex.lab = 3,
col.lab ="red", main = "some data", cex.main=1.5, col.main = "red")
dev.off()
setwd("C:/Users/sandhyao/Desktop/R April/R Data Visualisation/Section 01")
setwd("C:/Users/sandhyao/Desktop/R April/R Data Visualisation/Section 02")
setwd("D:/R April/R Data Visualisation/Section 02")
install.packages("ISLR")
library(ISLR)
attach(Carseats)
head(Carseats)
head(Carseats, 3)
tail(Carseats)
?plot()
?par
?points
plot(Income, Sales,col = c(Urban),pch = 20, main ="sales of Child Car Seats",
xlab = "Income (000's of Dollars)",ylab ="Unit Sales (in 000's)" )
legend("topright",cex = 0.6, fill = c("red","black"),legend = c("Yes","No"))
setwd("D:/R April/R Data Visualisation/Section 02/")
child = read.csv("chlmort.csv", header = TRUE, sep =",")
summary(child)
head(child)
plot(child$gdp_bil, child$child, pch = 20, col = "#756bb1",
xlim=c(0,max(child$gdp_bil)), ylim = c(0,190),
xlab = "GDP in Billions in current US$", ylab ="Child Mortality rate",
main = "child Mortality Rate in selected countries for 2012")
abline(h = (36.18), lwd = 1, col = "red")
text(8000,25,labels = c("Luxemborg"), cex = 0.75)
text(600,182,labels= c("Sierra Leone"), col = "red", cex = 0.75)
text(4000, 50,labels = c("Average Child Mortality"), col = "red", cex = 0.75)
?text()
scatter.smooth(child$gdp_bil, child$child, pch = 20, lwd =0.75,
col = "Blue", lpars = list(lty = 3, col ="black", lwd = 2),
xlab ="GDP in Billions in current US$", ylab ="Child Mortality rate",
main = "child Mortality Rate in selected countriesfor 2012" )
?scatter.smooth
data = read.csv("data/ginivsgdp1.csv", header = TRUE)
plot(income$gdp_ann,income$Gini,pch = 20, col =
c(data$Presidents), type = "o",xlab =" GDP of USA",
ylab = "Gini coefficient",main = "Inequality in USA",
xaxp = c(0,18000,8))
